/* 1. first we create a swap function to swap two elements.
2. After that we create a partition function This function takes last element as pivot, places 
the pivot element at its correct position in sorted 
array, and places all smaller (smaller than pivot) 
to left of pivot and all greater elements to right 
of pivot.
3. After thet we create a main quicksort function which takes arr, low, and high parameter.
4. then we create a print function to print sorted array' */

#include <bits/stdc++.h>
using namespace std;
void swap(int* a, int* b)
{
	int t = *a;
	*a = *b;
	*b = t;
}

int partition (int a[], int low, int high)
{
	int pivot = a[high]; 
	int i = (low - 1); 
	for (int j = low; j <= high - 1; j++)
	{
		
		if (a[j] < pivot)
		{
			i++; 
			swap(&a[i], &a[j]);
		}
	}
	swap(&a[i + 1], &a[high]);
	return (i + 1);
}


void quickSort(int a[], int low, int high)
{
	if (low < high)
	{
		
		int pi = partition(a, low, high);

	
		quickSort(a, low, pi - 1);
		quickSort(a, pi + 1, high);
	}
}


void printArray(int a[], int size)
{
	int i;
	for (i = 0; i < size; i++)
		cout << a[i] << " ";
	cout << endl;
}

int main()
{
    int n,i;
    cin>>n;
    int a[n];
    for(i=0;i<n;i++)
    {
        cin>>a[i];
    }

	quickSort(a, 0, n - 1);
	cout << "Sorted array: \n";
	printArray(a, n);
	return 0;
}

